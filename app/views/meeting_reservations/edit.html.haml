= render( partial: 'meetings/meeting_header' )
= render( partial: 'meetings/tabs_and_radio_title' )

.col-xs-12.goggles-category-gap
  = form_tag( meeting_reservations_update_path(id: @meeting.id), method: :post, onsubmit: "$('#loadingIndicator').show();" )
  %table.table.table-striped.table-bordered.table-hover.table-condensed
    %tbody
      -# Common header:
      %tr.success.text-center
        %td{ colspan: 2 }
          %i= I18n.t('meeting_stats.swimmers')
        - @reservations_events[ @meeting_reservations.first.id ].each do |event_reservation|
          - timing_hundreds = event_reservation.get_timing_instance.to_hundreds
          %td
            %b= event_reservation.event_type.i18n_short
        %td
          %i= I18n.t('meeting_reservation.free_notes')
      -# Data rows:
      - @meeting_reservations.each do |reservation|
        %tr
          %td{ colspan: 2, class: 'info' }
            %b= reservation.swimmer.get_full_name
            .row.col-xs-12
              %small
                %i= I18n.t('meeting_reservation.is_not_coming')
              &nbsp;&nbsp;
              = check_box_tag(                                              |
                "resComing_#{reservation.id}",                              |
                "1",                                                        |
                reservation.is_not_coming,                                  |
                'data-res' => reservation.id                                |
              )                                                             |
            .row.col-xs-12
              %small
                %i= I18n.t('meeting_reservation.has_confirmed')
              .goggles-label-margin80
                .switch
                  = check_box_tag("resConfirmed_#{reservation.id}", "1", reservation.has_confirmed, {'data-res' => reservation.id, class: 'common-switch common-switch-round' } )
                  %label{ for: "resConfirmed_#{reservation.id}" }
              -#= check_box_tag(                                              |
              -#  "resConfirmed_#{reservation.id}",                           |
              -#  "1",                                                        |
              -#  reservation.has_confirmed,                                  |
              -#  'data-res' => reservation.id                                |
              -#)                                                             |

          - @reservations_events[reservation.id].each do |event_reservation|
            - timing_hundreds = event_reservation.get_timing_instance.to_hundreds
            %td
              = text_field_tag(                                             |
                "evr_#{event_reservation.id}",                              |
                timing_hundreds > 0 ? event_reservation.get_timing : nil,   |
                'class' => "input-mini form-control text-right timing",     |
                'data-event-res' => event_reservation.id                    |
              )                                                             |
              .text-center
                %small
                  %i= "(#{ event_reservation.get_timing })"
              %br/
              .goggles-label-margin15
                .switch
                  = check_box_tag("evrRegistered_#{event_reservation.id}", "1", timing_hundreds > 0, {'data-event-res' => event_reservation.id, class: 'common-switch common-switch-round' } )
                  %label{ for: "evrRegistered_#{event_reservation.id}" }
              -#.checkbox
              -#  = label_tag( "evrRegistered_#{event_reservation.id}", I18n.t('meeting_reservation.registered') )
              -#  = check_box_tag(                                              |
              -#    "evrRegistered_#{event_reservation.id}",                    |
              -#    "1",                                                        |
              -#    timing_hundreds > 0,                                        |
              -#    'data-event-res' => event_reservation.id                    |
              -#  )                                                             |

          %td
            = text_area_tag(                                              |
              "resNotes_#{reservation.id}",                               |
              reservation.notes,                                          |
              'class' => "text-left form-control",                        |
              'data-res' => reservation.id                                |
            )                                                             |

        -#%tr
        -#  %td{ colspan: 2, class: 'info' }
        -#    %i= label_tag( "resNotes_#{reservation.id}", I18n.t('meeting_reservation.free_notes') )
        -#  %td{ colspan: @reservations_events[reservation.id].size }
        -#    = text_field_tag(                                             |
        -#      "resNotes_#{reservation.id}",                               |
        -#      reservation.notes,                                          |
        -#      'class' => "text-left form-control",                        |
        -#      'data-res' => reservation.id                                |
        -#    )                                                             |

.col-xs-12.goggles-category-gap
  .col-xs-2
    = submit_tag( I18n.t(:save), id: 'btnSaveEventReservation', data: {confirm: I18n.t('netzke.basepack.grid_panel.are_you_sure'), |
        disable_with: I18n.t(:please_wait), class: 'disabled' }, class: "btn btn-primary" )         |
    %span(id='loadingIndicator' hidden='true')
      = image_tag( 'indicator.gif' )

.col-xs-12.goggles-category-gap
  &nbsp;

:javascript
  /**
   * Binds formatting event to key press.
   */
  $('input.timing').bind('keyup', function (event) {
      var key = event.which;
      var currentValue = $(this).val();
      _formatTiming( currentValue, $(this) );
  });
  // --------------------------------------------------------------------------

  /**
   * Formats the current value as a timing.
   */
  function _formatTiming( currentValue, targetNode ) {
      // Remove formatting:
      var newValue = currentValue.replace( /[\'\.\:\"\,]/g, "" );
      // Enforce formatting:
      newValue = newValue.replace( /(?=(\d{2})$)/g, "\"" );
      newValue = newValue.replace( /(?=\B(\d{2})\D\d{2}$)/g, "\'" );
      targetNode.val( newValue );
  };
  // --------------------------------------------------------------------------
