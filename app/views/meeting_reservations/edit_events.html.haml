= render( partial: 'tabs_and_title' )
= render( partial: 'goggles/spinner_modal_overflow' )


%table.table.table-striped.table-bordered.table-hover.table-condensed
  %tbody
    = render( partial: 'header_row', locals: { meeting: @meeting, filter: :are_not_relays, add_notes_column: true } )

    - @badges_list.each do |badge|
      - reservation = find_or_new_badge_reservation( current_user, @meeting, @team_affiliation, badge )

      -# Avoid showing rows for people who's not coming:
      - if @is_valid_team_manager || ( @swimmer && (@swimmer.id == reservation.swimmer_id))
        %tr
          %td{ colspan: 2, class: 'info' }
            = render( partial: 'header_row_first_cell', locals: { badge: badge, reservation: reservation, is_invalid_team_manager: !@is_valid_team_manager, is_relays_reservation: false } )

          -# Only team managers can edit any row; a simple swimmer can edit only his/her own row.
          -# (if the reservation hasn't been already confirmed to the manager and the meeting
          -#  is still manageable)
          -# At the same time, row controls are editable only if the reservation hasn't been already confirmed or if the swimmer is not coming to the meeting
          - can_edit_events = (!reservation.has_confirmed) && (!reservation.is_not_coming) && TeamManagerValidator.is_reservation_manageable?( @meeting ) && (@is_valid_team_manager || ( @swimmer && (@swimmer.id == reservation.swimmer_id)))

          - @event_list.each do |event|
            - event_reservation = find_or_new_meeting_event_reservation( current_user, @meeting, @team_affiliation, badge, event )
            - chkbox_id = "chk#{ badge.id }_#{ event.id }"
            %td{ 'data-toggle'=>'tooltip', 'title'=> "#{ event.event_type.i18n_short }, #{ badge.swimmer.get_full_name }" }
              .text-center
                - default_value = event_reservation.is_doing_this ? event_reservation.get_timing : nil
                = text_field_tag(                                                       |
                  "time#{ badge.id }_#{ event.id }",                                    |
                  default_value,                                                        |
                  class:      "input-mini form-control text-right timing resRow#{ badge.id }",  |
                  disabled:   !can_edit_events,                                         |
                  onkeyup:    "_formatTiming( this.value, this );",                     |
                  onfocusout: "updateReservationTiming(\"#{ badge.id }\", \"#{ event.id }\");", |
                  onchange:   "updateReservationTiming(\"#{ badge.id }\", \"#{ event.id }\");", |
                  'data-toggle' => 'tooltip',                                           |
                  'title'       => event_reservation.event_type.i18n_short,             |
                  'data-value'  => default_value                                        |
                )                                                                       |
              .text-center
                %small
                  %i= "(#{ event_reservation.get_timing })"
                %br/
                .switch-box.is-success
                  %input{ id: chkbox_id, class: "switch-box-input resRow#{ badge.id }", |
                          type:    "checkbox", disabled: !can_edit_events,              |
                          checked: event_reservation.is_doing_this,                     |
                          onclick: "toggleEventSwitchValue(\"#{ badge.id }\", \"#{ event.id }\", \"#{ escape_javascript( event_reservation.get_timing ) }\");" |
                  }                                                                     |
                  %label{ for: chkbox_id, class: "switch-box-slider" }
          %td
            = render( partial: 'edit_cell_notes', locals: { badge_id: badge.id, default_value: reservation.notes, is_disabled: !can_edit_events } )

= render( partial: 'footer_row_with_js', locals: { meeting_id: @meeting.id } )
