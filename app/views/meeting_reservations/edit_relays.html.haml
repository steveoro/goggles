= render( partial: 'meetings/meeting_header' )
= render( partial: 'meetings/tabs_and_title' )

.col-xs-12.goggles-category-gap
  %ul.nav.nav-tabs#pageTop{role: "tablist"}
    = show_tab_link( params, 'edit_events', t('meeting_reservation.manage_events_title'), meeting_reservations_edit_events_path(id: @meeting.id) )
    = show_tab_link( params, 'edit_relays', t('meeting_reservation.manage_relays_title'), meeting_reservations_edit_relays_path(id: @meeting.id) )
  .goggles-category-gap

= form_tag( meeting_reservations_update_relays_path(id: @meeting.id), method: :post, onsubmit: "$('#loadingIndicator').show();" )
%table.table.table-striped.table-bordered.table-hover.table-condensed
  %tbody
    = render( partial: 'header_row', locals: { first_reservation: @reservations_relays[@meeting_reservations.first.id] } )

    -# Data rows:
    - @meeting_reservations.each do |reservation|
      - res_events_ids = @reservations_relays[reservation.id].map{ |re| re.id }
      - res_coming_id = "#{ MeetingReservationMatrixProcessor::DOM_PRE_RES_NOT_COMING }#{reservation.id}"
      -# Avoid showing rows for people who's not coming:
      - unless @is_valid_team_manager || reservation.is_not_coming
        %tr
          %td{ colspan: 1, class: 'info' }
            %a{'id'=>"swimmer#{reservation.swimmer_id}", 'href'=>"#{ swimmer_radio_path(id: reservation.swimmer_id) }", 'data-toggle'=>'tooltip', 'title'=>I18n.t('radiography.radio_tab_tooltip')}
              %b= reservation.swimmer.get_full_name
          %td{ colspan: 1, class: 'info' }
            - if !@is_valid_team_manager            # Hide team manager controls for standard gogglers:
              %small
                %i
                  = reservation.is_not_coming ? I18n.t('meeting_reservation.not_coming') : I18n.t('meeting_reservation.coming')
                  = I18n.t('meeting_reservation.add_maybe') if !reservation.has_confirmed
            - else                                  # Show full controls for team managers:
              .row.col-xs-12
                %small
                  %i= I18n.t('meeting_reservation.is_not_coming')
                &nbsp;&nbsp;
                = hidden_field_tag( res_coming_id, reservation.is_not_coming )
                = check_box_tag(                                                  |
                    "chk_#{ res_coming_id }", true, reservation.is_not_coming,    |
                    { disabled: !@is_valid_team_manager,                          |
                      onclick: "toggleAllRowControls( #{ res_events_ids }, '#{ reservation.id }' );" |
                  } )                                                             |

          -# Only team managers can edit any row; a simple swimmer can edit only his/her own row
          -# (if the reservation is manageable):
          -# At the same time, row controls are enabled only if the swimmer is coming to the meeting
          - can_edit_events = (!reservation.is_not_coming) && TeamManagerValidator.is_manageable?( @meeting ) && (@is_valid_team_manager || ( @swimmer && (@swimmer.id == reservation.swimmer_id)))
          - @reservations_relays[reservation.id].each do |relay_reservation|
            %td{ 'data-toggle'=>'tooltip', 'title'=> relay_reservation.event_type.i18n_short }
              -#.row
              -#  .col-xs-9
              -#    = text_field_tag(                                                       |
              -#      "#{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_NOTES }#{relay_reservation.id}", |
              -#      relay_reservation.is_doing_this ? relay_reservation.notes : nil,      |
              -#      'class' => "form-control",                                            |
              -#      disabled: !can_edit_events,                                           |
              -#      'data-event-res' => relay_reservation.id                              |
              -#    )                                                                       |
              -#  .col-xs-3.goggles-relay-reservation-cell-toggle
              -#    %br/
              .text-center{class: "switch_row_#{ reservation.id }"}
                - chkbox_id = "#{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }#{relay_reservation.id}"
                = hidden_field_tag( chkbox_id, relay_reservation.is_doing_this )
                = check_box_tag( "chk_#{ chkbox_id }", true, relay_reservation.is_doing_this,  |
                      { disabled: !can_edit_events,                                            |
                        onclick: "toggleSwitchValue(\"#{ relay_reservation.id }\");" } )       |
          %td
            = text_area_tag(                                                                |
              "#{ MeetingReservationMatrixProcessor::DOM_PRE_RES_NOTES }#{reservation.id}", |
              reservation.notes,                                                            |
              'class' => "text-left form-control",                                          |
              disabled: !can_edit_events,                                                   |
              'data-res' => reservation.id                                                  |
            )                                                                               |

.col-xs-12.goggles-category-gap
  .col-xs-2
    - can_save_form = TeamManagerValidator.is_manageable?( @meeting ) && ( @is_valid_team_manager || TeamManagerValidator.any_reservations_for?( current_user, @meeting ) )
    = submit_tag( I18n.t(:save), id: 'btnSaveRelayReservation', disabled: !can_save_form,     |
        data: { confirm: I18n.t('meeting_reservation.do_you_want_to_save_changes'),           |
        disable_with: I18n.t(:please_wait), class: 'disabled' }, class: "btn btn-primary" )   |
    %span(id='loadingIndicator' hidden='true')
      = image_tag( 'indicator.gif' )

.col-xs-12.goggles-category-gap
  &nbsp;

:javascript
  /**
   * Sets (or resets) the checkbox and the hidden field associated with a single
   * relay reservation id.
   *
   * Params:
   * - relayReservationId: the id as a string of the current event reservation object
   */
  function toggleSwitchValue( relayReservationId ) {
    var checkBox   = $("#chk_#{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }" + relayReservationId);
    var hiddenFld  = $("##{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }" + relayReservationId);
    var fieldValue = checkBox.prop('checked');
    var isChecked  = (fieldValue == true) || (fieldValue == 'true') || (fieldValue == '1');
    // Set the hidden field value according to current checkbox value (so that we can POST also false values):
    hiddenFld.val( isChecked );
  };
  // --------------------------------------------------------------------------

  /**
   * Enables or disables both the edit and the checkbox associated with a single
   * relay reservation id.
   *
   * Params:
   * - relayReservationId: the id as a string of the current event reservation object
   * - isDisabled: true or false value for the disabled property
   */
  function toggleRowControl( relayReservationId, isDisabled ) {
    var checkBox = $("#chk_#{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }" + relayReservationId);
    checkBox.prop( 'disabled', isDisabled );
    // [Steve, 20161229] Relay notes not currently displayed; leave this commented-out:
    // var textEdit = $("##{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_NOTES }" + relayReservationId);
    // textEdit.prop( 'disabled', isDisabled );

    //DEBUG
    //console.log( "relayReservationId: ", relayReservationId );
    //console.log( "isDisabled: ", isDisabled );
    //console.log( "checkBox: ", checkBox );
    //console.log( "checkBox.prop('checked'): ", checkBox.prop('checked') );
    //console.log( "hidden field: ", $("##{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }"+relayReservationId).val() );
  };
  // --------------------------------------------------------------------------


  /**
   * Enables or disables (and clears) a whole row of edit and checkbox controls
   * (each one associated with its composed DOM id to a single entity ID),
   * given an array of event reservation IDs.
   *
   * Params:
   * - relResIds: the array of relay reservation object IDs
   * - reservationId: row ID of the "parent" (badge) reservation
   */
  function toggleAllRowControls( relResIds, reservationId ) {
    var isNotComing = $("#chk_#{ MeetingReservationMatrixProcessor::DOM_PRE_RES_NOT_COMING }" + reservationId).prop('checked');
    var textNotes   = $("##{ MeetingReservationMatrixProcessor::DOM_PRE_RES_NOTES }" + reservationId);
    // Set the hidden fields value:
    $( "##{ MeetingReservationMatrixProcessor::DOM_PRE_RES_NOT_COMING }" + reservationId ).val( isNotComing );
    // Toggle row notes editability:
    textNotes.prop( 'disabled', isNotComing );

    // DEBUG
    //console.log( "relResIds: ", relResIds );

    // Toggle editability & clear/reset values:
    for (var i = 0; i < relResIds.length; i++) {
      // Toggle editability and set hidden field value:
      toggleRowControl( relResIds[i], isNotComing );

      // Clear edit box value and the reservation checkbox and the hidden field:
      if ( isNotComing ) {
        // [Steve, 20161229] Relay notes not currently displayed; leave this commented-out:
        //$("##{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_NOTES }" + relResIds[i]).val(null);
        $("##{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }" + relResIds[i]).val( false );
        $("#chk_#{ MeetingReservationMatrixProcessor::DOM_PRE_RELAY_CHECKED }" + relResIds[i]).prop( 'checked', false );
      }
    }

    // (Here we must NOT hide the row controls when isConfirmed, since we need to see the actual resulting checkbox status)
    // Hide or show all the row switches in one shot:
    if ( isNotComing ) {
      $( ".switch_row_" + reservationId ).hide();
    }
    else {
      $( ".switch_row_" + reservationId ).show();
    }
  };
  // --------------------------------------------------------------------------
