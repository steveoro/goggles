= render( partial: 'tabs_and_title' )

.col-xs-12.goggles-category-gap
  = form_tag( meeting_results_update_relay_swimmers_path(@meeting.id), onsubmit: "$('#loadingIndicator').show();" )
  - @mrrs.each do |mrr|
    .col-xs-6
      %table.table.table-striped.table-bordered.table-hover.table-condensed
        %tbody
          %tr.info
            %th.text-center
              %br/
              %h4
                = "#{ mrr.meeting_event.event_type.i18n_short }, #{ mrr.gender_type.code }-#{ mrr.category_type.short_name }"
            %th.text-right
              %br/
              %b= mrr.get_timing
          %tr
            %td.text-left
              %i= I18n.t('passages.relay_athlete')
            %td.text-right
              %i= "#{ mrr.event_type.phase_length_in_meters } #{ I18n.t('meters_short') }"
          - @relay_swimmer_hash[mrr.id].each do |relay_swimmer|
            %tr
              %td
                .form-group
                  %b= relay_swimmer.relay_order
                  &nbsp;
                  = hidden_field( :swimmer_id, "#{ mrr.id }_#{ relay_swimmer.relay_order }", value: relay_swimmer.swimmer_id )
                  = text_field_tag( "swimmer_id_#{ mrr.id }_#{ relay_swimmer.relay_order }_name",     |
                      relay_swimmer.swimmer ? relay_swimmer.swimmer.get_full_name : nil,              |
                      {autocomplete: 'off', class: "input-sm form-control typeahead",                 |
                      "data-provide"=>"typeahead", placeholder: I18n.t('combobox_3char_tooltip')} )   |
              %td.text-right
                .form-group
                  = text_field_tag(                                             |
                    "timing_#{ mrr.id }_#{ relay_swimmer.relay_order }",        |
                    relay_swimmer.get_timing,                                   |
                    'class' => "input-mini text-right timing"                   |
                  )                                                             |
      .col-xs-12.goggles-category-gap
        &nbsp;

  .col-xs-12.goggles-category-gap
    .col-xs-2
      = submit_tag( I18n.t(:save), id: 'btnSaveRelaySwimmers', data: {confirm: I18n.t('netzke.basepack.grid_panel.are_you_sure'), |
          disable_with: I18n.t(:please_wait), class: 'disabled' }, class: "btn btn-primary" ) |
      %span(id='loadingIndicator' hidden='true')
        = image_tag( 'indicator.gif' )

.col-xs-12.goggles-category-gap
  &nbsp;


:javascript
  /**
   * Binds formatting event to key press.
   */
  $('input.timing').bind('keyup', function (event) {
      var key = event.which;
      var currentValue = $(this).val();
      _formatTiming( currentValue, $(this) );
  });
  // --------------------------------------------------------------------------

  /**
   * Formats the current value as a timing.
   */
  function _formatTiming( currentValue, targetNode ) {
      // Remove formatting:
      var newValue = currentValue.replace( /[\'\.\:\"\,]/g, "" );
      // Enforce formatting:
      newValue = newValue.replace( /(?=(\d{2})$)/g, "\"" );
      newValue = newValue.replace( /(?=\B(\d{2})\D\d{2}$)/g, "\'" );
      targetNode.val( newValue );
  };
  // --------------------------------------------------------------------------


  /**
   * AJAX response buffer.
   * Stores the actual array of objects returned by the AJAX request.
   */
  var responseSwimmerNamesBuffer = [];

  /**
   * Datum tokenizer for the Bloodhound suggestion engine.
   * Returns the datum tokenized into a comparable string.
   */
  function tokenizeRelaySwimmerName( datum ) {
    // Extract just the name part:
    // DEBUG
    //console.log( "tokenizeRelaySwimmerName datum splitted: ", detokenizeRelaySwimmerName(datum) );
    return Bloodhound.tokenizers.obj.whitespace( detokenizeRelaySwimmerName(datum)[0] );
  }

  /**
   * De-tokenizer for composed results.
   * Splits a specified datum using '|' as separator.
   * Returns an array of string tokens, in which, allegedly, the order should be:
   * 1. Swimmer#complete_name
   * 2. Swimmer#year_of_birth (as a string number)
   * 3. Swimmer#gender_type_id (as a string number)
   * 4. remote Swimmer ID (as a string number)
   */
  function detokenizeRelaySwimmerName( datum ) {
    return datum.split("|");
  }

  /**
   * Remote response adapter for the Bloodhound suggestion engine.
   * It is expected to return a list of tokenized names, ready to be compared/matched.
   */
  function transformRelaySwimmerNamesResponse( data ) {
    // DEBUG
    console.log( "transformRelaySwimmerNamesResponse response: ", data );
    // Clear & rebuild the result list and the list of searchable names:
    var responseSwimmerNamesBuffer = [];

    // Since we're bound to return a list of tokenized & comparable strings,
    // we'll store the additional data to display into the same result row,
    // concatenated with an underscore (which is surely not used for a name).
    for ( idx = 0; idx < data.length; idx++ ) {
      var composedName = data[idx].complete_name  + "|" +
                         data[idx].year_of_birth + "|" +
                         data[idx].gender_type_id + "|" + data[idx].id;
      responseSwimmerNamesBuffer.push( composedName );
    };
    // DEBUG
    //console.log( "responseSwimmerNamesBuffer:", responseSwimmerNamesBuffer );
    return responseSwimmerNamesBuffer;
  }
  // --------------------------------------------------------------------------


  /**
   * Bloodhound suggestion engine setup.
   */
  var suggestedRelaySwimmerNames = new Bloodhound({
    datumTokenizer: tokenizeRelaySwimmerName,
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    // Assuming datum is a JSON-ified instance of swimmer, this should return its ID:
    //identify: function( datum ){ return datum.id; },
    remote: {
      url:       "#{ api_v1_swimmers_path(q:'QUERY', t: @managed_team_ids, s: @meeting.season_id) }",
      wildcard:  'QUERY',
      transform: transformRelaySwimmerNamesResponse
    }
  });
  // --------------------------------------------------------------------------


  var typeAheadRelaySwimmerOptions = {
    name:   'Swimmer-names',
    // This is just for the displaying limit for the menu, not the actual returned results:
    limit:  10,
    asynch: true,
    source: suggestedRelaySwimmerNames,
    // Displayable value for selections:
    display: function( datum ) {
      // Combine the individual tokens into a displayable value:
      var tokens = detokenizeRelaySwimmerName( datum );
      var namePart = tokens[0];
      var yearPart = tokens[1];
      return namePart + ' (' + yearPart + ')';
    },
    templates: {
      suggestion: function( datum ) {
        var tokens = detokenizeRelaySwimmerName( datum );
        // DEBUG
        //console.log('tokens: ', tokens);
        return '<div>' + tokens[0] + '&nbsp;<i>(' + tokens[1] + ')</i></div>'
      }
    }
  };
  // --------------------------------------------------------------------------


  // (Wait for the page to be ready)
  $( function() {
    // Define the typeahead callback handlers:
    $(".typeahead").typeahead(
      { minLength: 3, highlight: true },
      typeAheadRelaySwimmerOptions
    ).bind('typeahead:select', function( ev, suggestion ) {
        // DEBUG
        //console.log('Selection: ', suggestion);
        // Extract the ID part from the combined string:
        var remote_id = detokenizeRelaySwimmerName( suggestion )[3];
        // DEBUG
        //console.log( "remote_id: ", remote_id );
        // Compose the DOM ID of of the hidden form field to be updated:
        $( '#' + ev.target.id.split("_name")[0] ).val( remote_id );
      }
    );
  });
  // --------------------------------------------------------------------------
