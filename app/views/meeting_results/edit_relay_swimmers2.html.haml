-# [Steve, 20170314] Sadly, this does not resolve the Twitter Typeahead reload issue w/ Turbolinks: & the browser back-button
- content_for :head do
  %meta( name="turbolinks-cache-control" content="no-cache" )
  %meta( name="turbolinks-visit-control" content="reload" )

= render( partial: 'tabs_and_title' )
= render( partial: 'goggles/spinner_modal_overflow' )


.col-xs-12.alert.alert-warning
  = I18n.t('passages.relay_edit_disclaimer')


.col-xs-12.goggles-category-gap
  - @mrrs.each do |mrr|
    .col-xs-12.col-md-6.col-lg-4
      %table.table.table-striped.table-bordered.table-hover.table-condensed
        %tbody
          %tr.info
            %th.text-center{'colspan'=>'2'}
              %br/
              %h4
                = "#{ mrr.meeting_event.event_type.i18n_short },"
                = "#{ mrr.gender_type.code }-#{ mrr.category_type.short_name }"
            %th.text-center{'colspan'=>'2'}
              %br/
              %b= mrr.get_timing
          %tr
            %td.text-center{'colspan'=>'2'}
              %i= I18n.t('passages.relay_athlete')
            %td.text-center
              %i= "#{ mrr.event_type.phase_length_in_meters } #{ I18n.t('meters_short') }"
            %td.text-center
              %i= I18n.t('activerecord.attributes.meeting_relay_swimmer.reaction_time')

          - @relay_swimmer_hash[ mrr.id ].each do |relay_swimmer|
            - swimmer_dom_id  = "swimmer_#{ mrr.id }_#{ relay_swimmer.relay_order }"
            - timing_dom_id   = "timing_#{ mrr.id }_#{ relay_swimmer.relay_order }"
            - reaction_dom_id = "reaction_#{ mrr.id }_#{ relay_swimmer.relay_order }"
            %tr
              %td
                %b= relay_swimmer.relay_order
              %td
                = text_field_tag( swimmer_dom_id,                                         |
                    relay_swimmer.swimmer ? relay_swimmer.swimmer.get_full_name : nil,    |
                    'class' => "input-sm typeahead relay_swimmer",          |
                     autocomplete: 'off', "data-provide" => "typeahead",    |
                    'data-swimmer' => relay_swimmer.swimmer_id,             |
                    'data-mrr'     => mrr.id,                               |
                    'data-order'   => relay_swimmer.relay_order,            |
                    'data-swimmer_dom_id'  => swimmer_dom_id,               |
                    'data-timing_dom_id'   => timing_dom_id,                |
                    'data-reaction_dom_id' => reaction_dom_id,              |
                    placeholder: I18n.t('combobox_3char_tooltip') )         |
              %td.text-right
                = text_field_tag( timing_dom_id,                                          |
                  relay_swimmer.get_timing != "00\"00" ? relay_swimmer.get_timing : nil,  |
                  'class' => "input-mini text-right timing",                              |
                  'onkeyup' => "return _formatTiming( $(this).val(), $(this) );",         |
                  'onfocusout' => "return handleEditRelaySwimmer(this);",                 |
                  'data-swimmer' => relay_swimmer.swimmer_id,               |
                  'data-mrr'     => mrr.id,                                 |
                  'data-order'   => relay_swimmer.relay_order,              |
                  'data-swimmer_dom_id'  => swimmer_dom_id,                 |
                  'data-timing_dom_id'   => timing_dom_id,                  |
                  'data-reaction_dom_id' => reaction_dom_id                 |
                )                                                           |
              %td.text-right
                = text_field_tag( reaction_dom_id,                                        |
                  relay_swimmer.reaction_time > 0 ? relay_swimmer.reaction_time : nil,    |
                  'class' => "input-mini text-right timing",                              |
                  'onkeyup' => "return _formatTiming( $(this).val(), $(this) );",         |
                  'onfocusout' => "return handleEditRelaySwimmer(this);",                 |
                  'data-swimmer' => relay_swimmer.swimmer_id,               |
                  'data-mrr'     => mrr.id,                                 |
                  'data-order'   => relay_swimmer.relay_order,              |
                  'data-swimmer_dom_id'  => swimmer_dom_id,                 |
                  'data-timing_dom_id'   => timing_dom_id,                  |
                  'data-reaction_dom_id' => reaction_dom_id                 |
                )                                                           |
      .col-xs-12.goggles-category-gap
        &nbsp;

.col-xs-12.goggles-category-gap
  &nbsp;


:javascript
  /**
   * Invokes the remote editing action for the server
   */
  function handleEditRelaySwimmer( currNode ) {
    $('#spinner').removeClass('hide');
    // DEBUG
    console.log( "currNode:" );
    console.log( currNode );

    $.ajax({
      type: "POST",
      url: "#{ api_v2_remote_edit_update_relay_swimmer_path() }",
      data: {
        mrr:  currNode.dataset['mrr'],
        o:    currNode.dataset['order'],
        s:    currNode.dataset['swimmer'],
        time: $( "#" + currNode.dataset['timing_dom_id'] ).val(),
        r:    $( "#" + currNode.dataset['reaction_dom_id'] ).val()
      },
      dataType: "application/json"
    }).always( function( result ) {
      // DEBUG
      console.log('Callback: always');
      console.log( result.status );
      $('#spinner').addClass('hide');
    });

    return true;
  };
  // --------------------------------------------------------------------------


  /**
   * Formats the current value as a timing.
   */
  function _formatTiming( currentValue, targetNode ) {
      // Remove formatting:
      var newValue = currentValue.replace( /[\'\.\:\"\,]/g, "" );
      // Enforce formatting:
      newValue = newValue.replace( /(?=(\d{2})$)/g, "\"" );
      newValue = newValue.replace( /(?=\B(\d{2})\D\d{2}$)/g, "\'" );
      targetNode.val( newValue );

      return true;
  };
  // --------------------------------------------------------------------------


  /**
   * AJAX response buffer.
   * Stores the actual array of objects returned by the AJAX request.
   */
  var responseSwimmerNamesBuffer = [];

  /**
   * Datum tokenizer for the Bloodhound suggestion engine.
   * Returns the datum tokenized into a comparable string.
   */
  function tokenizeRelaySwimmerName( datum ) {
    // Extract just the name part:
    // DEBUG
    //console.log( "tokenizeRelaySwimmerName datum splitted: ", detokenizeRelaySwimmerName(datum) );
    return Bloodhound.tokenizers.obj.whitespace( detokenizeRelaySwimmerName(datum)[0] );
  }

  /**
   * De-tokenizer for composed results.
   * Splits a specified datum using '|' as separator.
   * Returns an array of string tokens, in which, allegedly, the order should be:
   * 1. Swimmer#complete_name
   * 2. Swimmer#year_of_birth (as a string number)
   * 3. Swimmer#gender_type_id (as a string number)
   * 4. remote Swimmer ID (as a string number)
   */
  function detokenizeRelaySwimmerName( datum ) {
    return datum.split("|");
  }

  /**
   * Remote response adapter for the Bloodhound suggestion engine.
   * It is expected to return a list of tokenized names, ready to be compared/matched.
   */
  function transformRelaySwimmerNamesResponse( data ) {
    // DEBUG
    //console.log( "transformRelaySwimmerNamesResponse response:" );
    //console.log( data );

    // Clear & rebuild the result list and the list of searchable names:
    var responseSwimmerNamesBuffer = [];

    // Since we're bound to return a list of tokenized & comparable strings,
    // we'll store the additional data to display into the same result row,
    // concatenated with an underscore (which is surely not used for a name).
    for ( idx = 0; idx < data.length; idx++ ) {
      var composedName = data[idx].complete_name  + "|" +
                         data[idx].year_of_birth + "|" +
                         data[idx].gender_type_id + "|" + data[idx].id;
      responseSwimmerNamesBuffer.push( composedName );
    };
    // DEBUG
    //console.log( "responseSwimmerNamesBuffer:" );
    //console.log( responseSwimmerNamesBuffer );
    return responseSwimmerNamesBuffer;
  }
  // --------------------------------------------------------------------------


  /**
   * Bloodhound suggestion engine setup.
   */
  var suggestedRelaySwimmerNames = new Bloodhound({
    datumTokenizer: tokenizeRelaySwimmerName,
    queryTokenizer: Bloodhound.tokenizers.whitespace,
    // Assuming datum is a JSON-ified instance of swimmer, this should return its ID:
    //identify: function( datum ){ return datum.id; },
    remote: {
      url:       "#{ api_v1_swimmers_path(q:'QUERY', t: @managed_team_ids, s: @meeting.season_id) }",
      wildcard:  'QUERY',
      transform: transformRelaySwimmerNamesResponse
    }
  });
  // --------------------------------------------------------------------------


  var typeAheadRelaySwimmerOptions = {
    name:   'Swimmer-names',
    // This is just for the displaying limit for the menu, not the actual returned results:
    limit:  10,
    asynch: true,
    source: suggestedRelaySwimmerNames,
    // Displayable value for selections:
    display: function( datum ) {
      // Combine the individual tokens into a displayable value:
      var tokens = detokenizeRelaySwimmerName( datum );
      var namePart = tokens[0];
      var yearPart = tokens[1];
      return namePart + ' (' + yearPart + ')';
    },
    templates: {
      suggestion: function( datum ) {
        var tokens = detokenizeRelaySwimmerName( datum );
        // DEBUG
        //console.log('tokens: ', tokens);
        return '<div>' + tokens[0] + '&nbsp;<i>(' + tokens[1] + ')</i></div>'
      }
    }
  };
  // --------------------------------------------------------------------------

  /**
   * Initializes the TypeAhead bundle
   */
  function initTypeAhead() {
    // DEBUG
    //console.log('Initializing Typeahead');

    // Define the typeahead callback handlers:
    $(".relay_swimmer").typeahead(
      { minLength: 3, highlight: true },
      typeAheadRelaySwimmerOptions
    ).bind( 'typeahead:select',
      function( ev, suggestion ) {
        // DEBUG
        //console.log('Selection: ', suggestion);
        // Extract the ID part from the combined string:
        var remote_id = detokenizeRelaySwimmerName( suggestion )[3];
        // DEBUG
        //console.log( "remote_id: ", remote_id );
        //console.log( "ev.target: ", ev.target );
        ev.target.dataset['swimmer'] = remote_id;
        handleEditRelaySwimmer( ev.target );
      }
    );
  }
  // --------------------------------------------------------------------------


  // DEBUG
  /*
  $(document).on('page:partial-load', function() {
    console.log('page:partial-load');
  });
  $(document).on('DOMContentLoaded', function() {
    console.log('DOMContentLoaded');
  });
  $(document).on('page:load', function() {
    console.log('page:load');
  });
  $(document).on('page:fetch', function() {
    console.log('page:fetch');
  });
  $(document).on('page:restore', function() {
    console.log('page:restore');
  });
  */

  $(document).on('ready', function() {
    // DEBUG
    //console.log('ready');
    // Any typeahead classes?
    if ( $(".typeahead").size() > 0 ) {
      //console.log('already-setup size:');
      //console.log( $(".twitter-typeahead").size() );
      // Avoid duplicate setup:
      // if ( $(".twitter-typeahead").size() == 0 ) {
        initTypeAhead();
      // }
    }
  });
  // --------------------------------------------------------------------------
