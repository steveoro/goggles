= render( partial: 'tabs_and_title' )
= render( partial: 'goggles/spinner_modal_overflow' )


.col-xs-12.goggles-category-gap
  %table.table.table-striped.table-bordered.table-hover.table-condensed
    %tbody
      - previous_event = nil
      - @editable_stuff.each do |hash_item|
        - individual_result = hash_item.keys.first
        - has_passages = ( hash_item.values.first.count > 0 )
        - mir = MeetingIndividualResultDecorator.decorate( individual_result )
        - passage_types = mir.team.team_passage_templates.for_event_type( mir.event_type ).for_pool_type( mir.pool_type ).exists? ? TeamPassageTemplate.get_default_passage_types_for( mir.event_type.length_in_meters, mir.pool_type.length_in_meters ) : TeamPassageTemplate.get_template_passage_types_for( mir.team, mir.event_type, mir.pool_type )
        - if previous_event != mir.meeting_event
          - previous_event = mir.meeting_event
          %th.info
            %td.info{ colspan: passage_types.size+1 }
              %br/
              %h4= mir.meeting_event.get_verbose_name
          %tr.info
            %td
            - passage_types.each do |passage_type|
              %td.goggles-rightalign
                %i= "#{ passage_type.length_in_meters } #{ I18n.t('meters_short') }"
            %td.goggles-rightalign
              =I18n.t('meeting.timing')
        %tr
          %td
            %a{ id: "swimmer#{mir.id}", href: "#{ meeting_show_swimmer_results_path(id: @meeting.id, team_id: mir.team_id, swimmer_id: mir.swimmer_id) }", 'data-toggle' => 'tooltip', title: I18n.t('meeting.show_swimmer_results_tooltip') }
              = mir.get_swimmer_name
          - count = ( passage_types.count - 1 )
          - passage_types.each_with_index do |passage_type, index|
            %td.goggles-rightalign{'colspan'=>'1'}
              - curr_passage = has_passages ? hash_item.values.first.where( passage_type_id: passage_type.id ).first : nil
              - if index < count                      # Data columns?
                - if curr_passage && (curr_passage.get_passage_distance != passage_types[index].length_in_meters)
                  %i= "#{ passage.get_passage_distance } #{ I18n.t('meters_short') }"
                  %br/
                - curr_value = curr_passage ? curr_passage.compute_incremental_time : nil
                = text_field_tag(                                                 |
                  "new_#{mir.id}_#{passage_type.id}",                             |
                  curr_value,                                                     |
                  'class' => "input-mini text-right timing",                      |
                  'onkeyup' => "_formatTiming( $(this).val(), $(this) );",        |
                  'onfocusout' => "handleEditPassage(this);",                     |
                  'data-passage' => curr_passage ? curr_passage.id : nil,         |
                  'data-mir' => mir.id,                                           |
                  'data-value' => curr_value,                                     |
                  'data-passage-type' => passage_type.id                          |
                )                                                                 |
                - if curr_passage
                  %br/
                  = curr_passage.get_timing

              - else                                  # Last column:
                = text_field_tag(                                                 |
                  "auto_#{mir.id}_#{passage_type.id}",                            |
                  mir.get_timing,                                                 |
                  'class' => "input-mini text-right timing",                      |
                  'onkeyup' => "_formatTiming( $(this).val(), $(this) );",        |
                  'onfocusout' => "handleEditPassage(this);",                     |
                  'data-mir' => mir.id,                                           |
                  'data-value' => mir.get_timing,                                 |
                  'data-passage-type' => passage_type.id                          |
                )                                                                 |
                - if curr_passage
                  %br/
                  = curr_passage.get_timing

          %td.goggles-rightalign
            %b= mir.get_timing

.col-xs-12.goggles-category-gap
  &nbsp;


:javascript
  /**
   * Invokes the remote editing action for editing the lap-times/timings (Passage)
   */
  function handleEditPassage( obj ) {
    // DEBUG
    console.log('handleEditPassage: called.');
    //console.log( obj.dataset['value'] );
    //console.log( obj.value );

    if ( obj.dataset['value'] != obj.value ) {
      // DEBUG
      //console.log('Changed!');

      $('#spinner').removeClass('hide');
      obj.dataset['value'] = obj.value;
      $.ajax({
        type: "POST",
        url: "#{ api_v2_remote_edit_update_passage_path() }",
        data: {
          p:    obj.dataset['passage'],
          mir:  obj.dataset['mir'],
          pt:   obj.dataset['passageType'],
          time: obj.value,
        },
        dataType: "application/json"
      }).always(function( result ) {
        // DEBUG
        //console.log('handleEditPassage: Callback: always');
        //console.log( result.status );
        $('#spinner').addClass('hide');
      });
    }
    //else {
      // DEBUG
      //console.log('No change detected: skipping.');
    //}

    return true;
  };
  // --------------------------------------------------------------------------
