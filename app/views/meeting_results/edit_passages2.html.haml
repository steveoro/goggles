= render( partial: 'tabs_and_title' )
= render( partial: 'goggles/spinner_modal_overflow' )


.col-xs-12.goggles-category-gap
  %table.table.table-striped.table-bordered.table-hover.table-condensed
    %tbody
      - previous_event = nil
      - @editable_stuff.each do |hash_item|
        - individual_result = hash_item.keys.first
        - passages = hash_item.values.first
        - has_passages = ( passages.count > 0 )
        - mir = MeetingIndividualResultDecorator.decorate( individual_result )
        - passage_types = mir.team.team_passage_templates.for_event_type( mir.event_type ).for_pool_type( mir.pool_type ).exists? ? TeamPassageTemplate.get_default_passage_types_for( mir.event_type.length_in_meters, mir.pool_type.length_in_meters ) : TeamPassageTemplate.get_template_passage_types_for( mir.team, mir.event_type, mir.pool_type )
        - if previous_event != mir.meeting_event
          - previous_event = mir.meeting_event
          %th.info
            %td.info{ colspan: passage_types.size+1 }
              %br/
              %h4= mir.meeting_event.get_verbose_name
          %tr.info
            %td
            - passage_types.each do |passage_type|
              %td.goggles-rightalign
                %i= "#{ passage_type.length_in_meters } #{ I18n.t('meters_short') }"
            %td.goggles-rightalign
              =I18n.t('meeting.timing')
        %tr
          %td
            %a{ id: "swimmer#{mir.id}", href: "#{ meeting_show_swimmer_results_path(id: @meeting.id, team_id: mir.team_id, swimmer_id: mir.swimmer_id) }", 'data-toggle' => 'tooltip', title: I18n.t('meeting.show_swimmer_results_tooltip') }
              = mir.get_swimmer_name
          - if has_passages
            - passages.order(:passage_type_id).each_with_index do |passage, index|
              %td.goggles-rightalign{'colspan'=>'1'}
                - if passage.get_passage_distance != passage_types[index].length_in_meters
                  %i= "#{ passage.get_passage_distance } #{ I18n.t('meters_short') }"
                  %br/
                = text_field_tag(                                             |
                  "pas_#{passage.id}",                                        |
                  passage.compute_incremental_time,                           |
                  'class' => "input-mini text-right timing",                  |
                  'onchange' => "return handleEditPassage(this);",            |
                  'data-passage' => passage.id,                               |
                  'data-mir' => mir.id,                                       |
                  'data-passage-type' => passage.passage_type_id              |
                )                                                             |
                %br/
                = passage.get_timing
          - else
            - count = ( passage_types.count - 1 )
            - passage_types.each_with_index do |passage_type, index|
              - if index < count
                %td.goggles-rightalign{'colspan'=>'1'}
                  = text_field_tag(                                             |
                    "new_#{mir.id}_#{passage_type.id}",                         |
                    nil,                                                        |
                    'class' => "input-mini text-right timing",                  |
                    'onchange' => "return handleEditPassage(this);",            |
                    'data-mir' => mir.id,                                       |
                    'data-passage-type' => passage_type.id                      |
                  )                                                             |
              - else
                %td.goggles-rightalign{'colspan'=>'1'}
                  = text_field_tag(                                             |
                    "auto_#{mir.id}_#{passage_type.id}",                        |
                    mir.get_timing,                                             |
                    'class' => "input-mini text-right timing",                  |
                    'onchange' => "return handleEditPassage(this);",            |
                    'data-mir' => mir.id,                                       |
                    'data-passage-type' => passage_type.id                      |
                  )                                                             |
          %td.goggles-rightalign
            %b= mir.get_timing

.col-xs-12.goggles-category-gap
  &nbsp;

:javascript
  /**
   * Invokes the remote editing action for the server
   */
  function handleEditPassage( obj ) {
    $('#spinner').removeClass('hide');
    $.ajax({
      type: "POST",
      url: "#{ api_v2_remote_edit_update_passage_path() }",
      data: {
        p:    obj.dataset['passage'],
        mir:  obj.dataset['mir'],
        pt:   obj.dataset['passageType'],
        time: obj.value,
      },
      dataType: "application/json"
    }).done(function() {
      // DEBUG
      console.log('DONE');
    }).fail(function() {
      // DEBUG
      console.log('ERROR');
    }).always(function() {
      // DEBUG
      console.log('in Always');
      $('#spinner').addClass('hide');
    });

    return true;
  };
  // --------------------------------------------------------------------------

  /**
   * Binds formatting event to key press.
   */
  $('input.timing').bind('keyup', function (event) {
      var key = event.which;
      var currentValue = $(this).val();
      _formatTiming( currentValue, $(this) );
  });
  // --------------------------------------------------------------------------

  /**
   * Formats the current value as a timing.
   */
  function _formatTiming( currentValue, targetNode ) {
      // Remove formatting:
      var newValue = currentValue.replace( /[\'\.\:\"\,]/g, "" );
      // Enforce formatting:
      newValue = newValue.replace( /(?=(\d{2})$)/g, "\"" );
      newValue = newValue.replace( /(?=\B(\d{2})\D\d{2}$)/g, "\'" );
      targetNode.val( newValue );
  };
  // --------------------------------------------------------------------------
