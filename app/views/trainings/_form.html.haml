.row-fluid.span12

= simple_nested_form_for @training do |f|
  = f.input :title, input_html: { class: 'span5' }
  = f.input :description, input_html: { rows: 3, class: 'span8' }
  = f.association :swimmer_level_type, collection: SwimmerLevelType.to_dropdown, prompt: I18n.t('trainings.chose_swimmer_level_type')

  .row-fluid.goggles-div-centeralign.goggles-smallfont
    .span1.goggles-w15
      %i= I18n.t('activerecord.attributes.training_rows.part_order')
    .span2
      %i= I18n.t('activerecord.models.training_step_type')
    .span1.goggles-w30
      %i= I18n.t('activerecord.attributes.training_rows.times')
    .span1.goggles-w50
      %i= I18n.t('activerecord.attributes.training_rows.distance')
    .span2
      %i= I18n.t('activerecord.attributes.training_rows.exercise')
    .span1.goggles-w50
      %i= I18n.t('activerecord.attributes.training_rows.start_and_rest')
    .span1.goggles-w50
      %i= I18n.t('activerecord.attributes.training_rows.pause')
    .span1.goggles-w50

  .row-fluid#training_rows
    %ul#sortable.goggles-sortable
      = f.fields_for :training_rows, :wrapper => false do |training_row_form|
        %li.goggles-sortable
          .controls.controls-row.row-fluid
            .goggles-float.goggles-w15
              = training_row_form.input :part_order, label: false, wrapper: false, input_html: {class: 'autosequence'}
            .goggles-float
              = training_row_form.association :training_step_type, label: false, wrapper: false, collection: TrainingStepType.to_dropdown(nil,:id,:i18n_description), prompt: I18n.t('please_select'), input_html: {class: 'autocomplete'}
            .goggles-float.goggles-w30
              = training_row_form.input :times, label: false, wrapper: false, input_html: {class: 'spinner'}
            .goggles-float.goggles-w50
              = training_row_form.input :distance, label: false, wrapper: false
            .goggles-float
              = training_row_form.association :exercise, label: false, wrapper: false, collection: Exercise.to_dropdown, prompt: I18n.t('trainings.chose_exercise')
            .goggles-float.goggles-w80
              = training_row_form.input :start_and_rest, label: false, wrapper: false do
                = training_row_form.select :start_and_rest, (0.step(3600,5).collect{ |x| [(x > 0 ? sprintf("%2s\'%02.0f\"",x/60, x%60) : '-'), x] })
            .goggles-float.goggles-w80
              = training_row_form.input :pause, label: false, wrapper: false do
                = training_row_form.select :pause, (0.step(1800,5).collect{ |x| [(x > 0 ? sprintf("%2s\'%02.0f\"",x/60, x%60) : '-'), x] })
            .goggles-float.goggles-w50
              .controls
                = training_row_form.link_to_remove( image_tag('delete.png'), :onclick => "alert('Jimbo! This will be deleted when you post everything!'); disableRowToBeDeleted(this);" )
  %p
  %p
    %i= "#{I18n.t(:drag_and_drop_to_sort_rows)} / "
    = f.link_to_add I18n.t(:add_new_row), :training_rows, :data => { :target => "#training_rows" }
  %p= f.button :submit

  #maxPartOrder{'data-value' => @training_max_part_order || 0 }

%script
  var maxSeq = Number( $('#maxPartOrder').attr('data-value') );

  function updateAutoSeq( event, ui ){                                          |
    var fieldList = $('#sortable').first().find('input.autosequence');          |
    fieldList.each( function(index, element) {                                  |
      element.value = index + 1;                                                |
    });                                                                         |
  };                                                                            |

  function disableRowToBeDeleted( obj ){                                        |
    console.log( obj );                                                         |
  };

  $(document).ready( function(obj) {                                            |
    var spnField=$('.spinner');                                                 |
    if ( spnField ) {                                                           |
      spnField.spinner();                                                       |
    }                                                                           |
    $( "#sortable" ).sortable({                                                 |
      placeholder: "ui-state-highlight",                                        |
      beforeStop: updateAutoSeq                                                 |
    });                                                                         |
  });                                                                           |

  $(document).on( 'nested:fieldAdded',                                          |
    function(event){                                                            |
      var f=event.field;                                                        |
      var seqField=f.find('.autosequence');                                     |
      maxSeq += 1;                                                              |
      seqField.val(maxSeq);                                                     |
      var spnField = $('.spinner');                                             |
      if ( spnField ) {                                                         |
        spnField.spinner();                                                     |
      }                                                                         |
    }                                                                           |
  );                                                                            |
