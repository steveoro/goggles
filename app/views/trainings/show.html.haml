.row-fluid
  .span3
    = link_to_trainings()
  .span2
    = link_to_user_training_printout( @training )
  .span2
    = link_to_user_edit( @user_training )
  .span2
    = link_to_training_duplicate( @user_training )

.accordion
  .accordion-group
    .accordion-heading.goggles-accordion-heading
      .row-fluid
        .span12
          %h3= @title
    .accordion-body
      .accordion-inner
        - if admin_signed_in?
          .row-fluid
            .span2
              = 'ID:'
            .span10
              = @training.id
        .row-fluid
          .span2
            = I18n.t('activerecord.attributes.training.title') + ':'
          .span10
            = @training.title
        .row-fluid
          .span2
            = I18n.t('activerecord.attributes.training.description') + ':'
          .span10
            = @training.description
        .row-fluid
          .span2
            = I18n.t('activerecord.attributes.training.user') + ':'
          .span10
            = @training.get_user_name
        .row-fluid
          .span2
            = I18n.t('activerecord.models.swimmer_level_type') + ':'
          .span10
            = @training.get_swimmer_level_type(:i18n_description)
        .row-fluid
          .span2
            %i= I18n.t(:updated_at) + ':'
          .span10
            %i= Format.a_short_datetime( @training.updated_at )
        .row-fluid
          .span2
            = I18n.t('trainings.total_meters') + ':'
          .span10
            = @training.compute_total_distance
        .row-fluid
          .span2
            = I18n.t('trainings.esteemed_timing') + ':'
          .span10
            = Timing.to_hour_string( @training.compute_total_seconds() )

.row-fluid
  .span12
    - curr_group_id = old_group_id = 0
    - group_list_hash = @training.build_group_list_hash()
    - @training_rows.each do |training_row|
      - fields = training_row.to_array()
      - if (training_row.group_id > 0) && group_list_hash.has_key?( training_row.group_id )
        - curr_group_id = training_row.group_id
        - if old_group_id != curr_group_id          # Start of new group?
          - old_group_id     = curr_group_id
          - group_hash       = group_list_hash[ training_row.group_id ]
          - tot_group_secs   = TrainingRow.compute_total_seconds( group_hash[:datarows] )
          - tot_group_timing = Timing.to_minute_string( tot_group_secs )
          .row-fluid
            .span2.goggles-training
              %pre= "#{fields[0] } #{fields[1] } (#{ tot_group_timing })"
            .span1.goggles-training
              %pre= "#{group_hash[:times] }x"
            - group_pause = group_hash[:pause].to_i
            - group_s_r   = group_hash[:start_and_rest].to_i
            - if ( group_pause > 0 || group_s_r > 0 )
              .span2.goggles-training
                %pre= "#{ Timing.to_formatted_start_and_rest( group_s_r ) } #{ Timing.to_formatted_pause( group_pause ) }"
          .row-fluid
            .offset2.span1.goggles-div-rightalign.goggles-training
              %pre= "(+)#{ fields[3] }"
            .span9.goggles-training
              %pre= fields[4]
        - else                                      # Same old group?
          .row-fluid
            .offset2.span1.goggles-div-rightalign.goggles-training
              %pre= "(+)#{ fields[3] }"
            .span9.goggles-training
              %pre= fields[4]
      - else                                        # Not in a group?
        - curr_group_id = 0
        .row-fluid
          .span2.goggles-training
            %pre
              = "#{fields[0] } #{fields[1] } (#{ Timing.to_minute_string(fields[2]) })"
          .span1.goggles-div-rightalign.goggles-training
            %pre= fields[3]
          .span9.goggles-training
            %pre= fields[4]
