.accordion#accordionFlt
  .accordion-group
    .accordion-inner
      .accordion-heading
        %h3= @title
    .accordion-body
      .accordion-inner
        = form_tag( :records_for_swimmer, remote: true, method: :get, class: 'form-horizontal', onsubmit: "$('#loadingIndicator').show();") do
          .row-fluid
            .control-group
              = label_tag( :swimmer, I18n.t('activerecord.models.swimmer'), for: :swimmer, class: 'control-label' )
              .controls
                .ui-widget
                  = hidden_field( :swimmer, :id )
                  = text_field_tag( :swimmer_name, nil, {autocomplete: 'off', class: "input-xlarge typeahead",  |
                      "data-provide"=>"typeahead", placeholder: I18n.t('combobox_3char_tooltip')} )        |
          .row-fluid
            .controls
              = submit_tag( I18n.t(:submit), data: { disable_with: I18n.t(:please_wait), class: 'btn disabled' }, class: 'btn' )
              %span(id='loadingIndicator' hidden='true')
                = image_tag( 'indicator.gif' )

#records_4x_grid

:javascript
  /* Lopk-up function for IDs stored in the list of result objects */
  function lookupIdInResultListByName( name, resultList ) {
    for ( var j = 0; j < resultList.length; j++ ) {
      if ( resultList[j].complete_name.match( name ) )
        return resultList[j].id;
    }
    return -1;
  }

  // (Wait for the page to be ready)
  $(function() {
    var resultList = [];

    // Define the typeahead callback handlers:
    $( ".typeahead" ).typeahead({
      items:     20,
      minLength: 3,

      source: function( queryText, processResults ) {
        // DEBUG
        //console.log( "get Ajax swimmers queryText: ", queryText );
        return $.get(
          "#{ api_v1_swimmers_path() }",
          { q: queryText },
          function (data) {
            // DEBUG
          	//console.log( "returning data:", data );
            // Clear & rebuild the result list and the list of searchable names:
            resultList = [];
            var searchables = [];
            for ( idx = 0; idx < data.length; idx++ ) {
              resultList.push( { id: data[idx].id, complete_name: data[idx].complete_name } );
              searchables.push( data[idx].complete_name );
            };
            // DEBUG
            //console.log( "resultList:", resultList );
            //console.log( "searchables:", searchables );
            return processResults( searchables );
        });
      },

      updater: function( matchedText ) {
        // DEBUG
        //console.log( "getChosenSwimmer matchedText: ", matchedText );
        var remote_id = lookupIdInResultListByName( matchedText, resultList );
        //console.log( "remote_id: ", remote_id );
        $("#swimmer_id").val( remote_id );
        return matchedText;
      }
    });

  });
