<%= define_grid(@meetings_grid, hide_submit_button: true, hide_reset_button: true) do |g|
    # FIXME .odd & .even styles still prevail:
#    g.row_attributes do |meeting|
#        { class: MeetingDecorator.decorate(meeting).get_css_class_for_season_type }
#    end

    g.blank_slate do
        content_tag( :div, t(:no_data_found), class: 'well' )
    end

    g.column( name: 'ID', attribute: 'id', filter: false ) if admin_signed_in?

    g.column(
        #name: I18n.t('meeting_calendar.federation'),
        attribute: 'season_id',
        custom_filter: Season.to_dropdown( "(end_date >= '#{@start_date}') AND (end_date <= '#{@end_date}')" ),
        detach_with_id: :flt_season_id
    ) do |meeting|
        [
            MeetingDecorator.decorate(meeting).get_logo_for_season_type,
            { class: 'goggles-centeralign' }
        ] if meeting.season
    end

    g.column(
        name: I18n.t('meeting_calendar.meeting'),
        attribute: 'description',
        detach_with_id: :flt_description
    ) do |meeting|
    	meeting.decorate.get_linked_name( :get_full_name )
    	#show_tag( meeting.are_results_acquired )
    end

    g.column(
        name: I18n.t('meeting_calendar.scheduled_date'),
        attribute: 'header_date',
        detach_with_id: :flt_header_date
    ) do |meeting|
    	session_date_list = []
    	session_date = ''
        meeting.get_session_dates.split("\r\n").each do |scheduled_date|
          if session_date != scheduled_date
          	session_date_list << scheduled_date
            session_date = scheduled_date
          else
          	session_date_list << ''
          end
        end
        [session_date_list.join('<br><br>').html_safe,
        { class: 'goggles-rightalign' }]
    end

    g.column(
        name: I18n.t('meeting_calendar.pool_type'),
        attribute: 'pool_type_id',
        model: SwimmingPool,
        custom_filter: PoolType.only_for_meetings.to_dropdown,
        detach_with_id: :flt_pool_type
    ) do |meeting|
    	[ meeting.swimming_pools.first.pool_type.code,
    		{ class: 'goggles-centeralign' } ] if meeting.swimming_pools.count > 0
    end

    g.column(
        name: I18n.t('meeting_calendar.warm_up_time'),
        detach_with_id: :flt_warm_up,
        filter: false
    ) do |meeting|
    	meeting.decorate.get_session_warm_up_times
    end

    g.column(
        name: I18n.t('meeting_calendar.start_up_time'),
        detach_with_id: :flt_start_up,
        filter: false
    ) do |meeting|
    	meeting.decorate.get_session_begin_times
    end

    g.column(
        name: I18n.t('meeting_calendar.meeting_program'),
        attribute: 'id',
        allow_multiple_selection: false,
        custom_filter: Meeting.to_dropdown(
            "(header_date >= '#{@start_date}') AND (header_date <= '#{@end_date}')",
            :id,
            :get_complete_events
        ),
        detach_with_id: :flt_events_list
    ) do |meeting|
        meeting.decorate.get_complete_events
    end

    g.column(
        name: I18n.t('meeting_calendar.pool'),
        detach_with_id: :flt_swimming_pool,
        filter: false
    ) do |meeting|
    	#meeting.decorate.get_linked_swimming_pool
    	meeting.decorate.get_linked_swimming_pool( :get_city_and_attributes )
    end
    
end -%>
