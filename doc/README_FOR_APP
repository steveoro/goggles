[Steve, 20160923] *** Update to Rails 5 ***

Post-install message from pdf-reader:

  ********************************************

  v1.0.0 of PDF::Reader introduced a new page-based API. There are extensive
  examples showing how to use it in the README and examples directory.

  For detailed documentation, check the rdocs for the PDF::Reader,
  PDF::Reader::Page and PDF::Reader::ObjectHash classes.

  The old API is marked as deprecated but will continue to work with no
  visible warnings for now.

  ********************************************

Post-install message from prawn:

  ********************************************


  A lot has changed since 0.8.4

  Please read the changelog for details:

  https://github.com/sandal/prawn/wiki/CHANGELOG


  ********************************************

Post-install message from capistrano-harrow:

     ___   _   ___ ___ ___ _____ ___    _   _  _  ___
    / __| /_\ | _ \_ _/ __|_   _| _ \  /_\ | \| |/ _ \
   | (__ / _ \|  _/| |\__ \ | | |   / / _ \| .` | (_) |
    \___/_/ \_\_| |___|___/ |_| |_|_\/_/ \_\_|\_|\___/

    Learn about our web-based collaboration and
    automation platform for Capistrano: hrw.io/auto-cap

Post-install message from capistrano-passenger:
==== Release notes for capistrano-passenger ====
passenger once had only one way to restart: `touch tmp/restart.txt`
Beginning with passenger v4.0.33, a new way was introduced: `passenger-config restart-app`

The new way to restart was not initially practical for everyone,
since for versions of passenger prior to v5.0.10,
it required your deployment user to have sudo access for some server configurations.

capistrano-passenger gives you the flexibility to choose your restart approach, or to rely on reasonable defaults.

If you want to restart using `touch tmp/restart.txt`, add this to your config/deploy.rb:

    set :passenger_restart_with_touch, true

If you want to restart using `passenger-config restart-app`, add this to your config/deploy.rb:

    set :passenger_restart_with_touch, false # Note that `nil` is NOT the same as `false` here

If you don't set `:passenger_restart_with_touch`, capistrano-passenger will check what version of passenger you are running
and use `passenger-config restart-app` if it is available in that version.

If you are running passenger in standalone mode, it is possible for you to put passenger in your
Gemfile and rely on capistrano-bundler to install it with the rest of your bundle.
If you are installing passenger during your deployment AND you want to restart using `passenger-config restart-app`,
you need to set `:passenger_in_gemfile` to `true` in your `config/deploy.rb`.
================================================
Post-install message from rails_best_practices:
********************************************************************************

  rails_best_practices is a code metric tool to check the quality of rails codes.

  I highly recommend you browse the Rails Best Practices website first.

      http://rails-bestpractices.com

  Please also try our online service

      http://railsbp.com

  Enjoy!

      Richard Huang (flyerhzm@gmail.com)

********************************************************************************



[Steve, 20141103] *** OUTDATED ***

Mini HOWTO
==========


=== How-to: make Netzke and ExtJS 4 work flawlessly with Rails 3 & its assets pipeline

Simply put, they don't. Don't waste time trying to fix it or cache it in
some other manner.

The dynamic loading of ExtJS classes does not work with the assets pipeline,
so the only way to optimize it, it's to keep the Netzke components precompiled
inside the assets pipeline and the ExtJS library itself out of it, using the
dedicated public/extjs subfolder.

Netzke 0.7.7 expects precisely:
- all fam-fam icons to be under public/images/icons
- ExtJS library 4.1.1 to be under public/extjs

...Otherwise most icons will be missing from the UI and/or some ExtJS classes
will be unloadable.



=== How-to: AgeX5-application first-time deployment

Issue: Assets precompilation depends on the DB, but the DB does not
exist yet for a fresh install.

Solution: Using deploy.rb recipe vers. ~> 3.03.20130329 and assuming example
server 'vm1' with no DB created yet:

- cap -v vm1 deploy:update
  (to copy just the code)
- cap -v vm1 deploy:upload \
  FILES=db/seed*
  (to load the seed data on vm1)
- cap -v vm1 remote:rake
  => -v RAILS_ENV=production db:setup
  (to load the schema and the seed data; use db:reset if the DB already exists)
- cap -v with_assets vm1 deploy
  (to actually deploy the app)

For each subsequent source update do either a deploy or a deploy:update :
- cap -v with_assets vm1 deploy
  (don't forget the 'with_assets' task)

Use 'deploy:full_release' task to update also the versioning number & the news log:
- cap -v <server_name> with_assets deploy:full_release



=== How-to: load existing seeds.

Use the custom compound rake task:

  > rake db:rebuild_from_scratch

...Which, in turn, executes all migrations plus all the SQL files stored inside
the db/seed directory.

DO NOT use a Rails/Ruby import method with #create([...]), because is painstakingly
slow.

Simply put: >>> STICK WITH SQL DUMP FILES. <<<

You can safely skip the following if you already know it. (This is here just as a reminder! ;-) )

*** [BEGIN] !!!! DON'T DO THIS -- DON'T DO THIS: !!!!

This is an example of a painstakingly slow method to reload all the current
IndividualRecord rows.

Before launching rake db:seed (which is able to look-up only for db/seeds.rb file),
create the empty file 'db/seeds_for_individual_record.rb' and fill it using the
task provided by the seed_dump gem (vers. 0.5.3):

  > rake db:seed:dump MODELS=IndividualRecord WITH_ID=1 CREATE_METHOD='create!' FILE=db/seeds_for_individual_record.rb

Then, inside db/seeds.rb, to load and run the refactored data seed, add a simple:

  # [...other file contents...]
  load 'db/seeds_for_individual_record.rb'

Finally, invoke "rake db:seed" to run the Rails create!() line generated with the
above task.

For versions of Rails prior to 4, this is slow and inefficient and may take several
minutes to complete on a very fast machine (for a 5K rows creation statement), where
a corresponding SQL file full of INSERTs would take just a few seconds.

So, DON'T USE THIS APPROACH with Rails <= 3!

*** [END] ---- DON'T DO THIS -- DON'T DO THIS ----



=== How-to: extract SQL dumps for data seeds.

Use the dedicated custom rake task:

  > rake db:seed_dump_sql

