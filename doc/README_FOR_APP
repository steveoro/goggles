[Steve, 20141103] *** OUTDATED ***

Mini HOWTO
==========


=== How-to: make Netzke and ExtJS 4 work flawlessly with Rails 3 & its assets pipeline

Simply put, they don't. Don't waste time trying to fix it or cache it in
some other manner.

The dynamic loading of ExtJS classes does not work with the assets pipeline,
so the only way to optimize it, it's to keep the Netzke components precompiled
inside the assets pipeline and the ExtJS library itself out of it, using the
dedicated public/extjs subfolder.

Netzke 0.7.7 expects precisely:
- all fam-fam icons to be under public/images/icons
- ExtJS library 4.1.1 to be under public/extjs

...Otherwise most icons will be missing from the UI and/or some ExtJS classes
will be unloadable.



=== How-to: AgeX5-application first-time deployment

Issue: Assets precompilation depends on the DB, but the DB does not
exist yet for a fresh install.

Solution: Using deploy.rb recipe vers. ~> 3.03.20130329 and assuming example
server 'vm1' with no DB created yet:

- cap -v vm1 deploy:update
  (to copy just the code)
- cap -v vm1 deploy:upload \
  FILES=db/seed*
  (to load the seed data on vm1)
- cap -v vm1 remote:rake
  => -v RAILS_ENV=production db:setup
  (to load the schema and the seed data; use db:reset if the DB already exists)
- cap -v with_assets vm1 deploy
  (to actually deploy the app)

For each subsequent source update do either a deploy or a deploy:update :
- cap -v with_assets vm1 deploy
  (don't forget the 'with_assets' task)

Use 'deploy:full_release' task to update also the versioning number & the news log:
- cap -v <server_name> with_assets deploy:full_release



=== How-to: load existing seeds.

Use the custom compound rake task:

  > rake db:rebuild_from_scratch

...Which, in turn, executes all migrations plus all the SQL files stored inside
the db/seed directory.

DO NOT use a Rails/Ruby import method with #create([...]), because is painstakingly
slow.

Simply put: >>> STICK WITH SQL DUMP FILES. <<<

You can safely skip the following if you already know it. (This is here just as a reminder! ;-) )

*** [BEGIN] !!!! DON'T DO THIS -- DON'T DO THIS: !!!!

This is an example of a painstakingly slow method to reload all the current
IndividualRecord rows.

Before launching rake db:seed (which is able to look-up only for db/seeds.rb file),
create the empty file 'db/seeds_for_individual_record.rb' and fill it using the
task provided by the seed_dump gem (vers. 0.5.3):

  > rake db:seed:dump MODELS=IndividualRecord WITH_ID=1 CREATE_METHOD='create!' FILE=db/seeds_for_individual_record.rb

Then, inside db/seeds.rb, to load and run the refactored data seed, add a simple:

  # [...other file contents...]
  load 'db/seeds_for_individual_record.rb'

Finally, invoke "rake db:seed" to run the Rails create!() line generated with the
above task.

For versions of Rails prior to 4, this is slow and inefficient and may take several
minutes to complete on a very fast machine (for a 5K rows creation statement), where
a corresponding SQL file full of INSERTs would take just a few seconds.

So, DON'T USE THIS APPROACH with Rails <= 3!

*** [END] ---- DON'T DO THIS -- DON'T DO THIS ----



=== How-to: extract SQL dumps for data seeds.

Use the dedicated custom rake task:

  > rake db:seed_dump_sql

